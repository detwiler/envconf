name: ci-cd
on: [push]
jobs:

  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    container: ${{ matrix.image }}

    strategy:
      matrix:
        include:
          - image: alpine:latest
            vim-ycm-owner: detwiler
            vim-ycm-ref: llvm-10
          - image: fedora:latest
            vim-ycm-owner: ycm-core
            vim-ycm-ref: master
          - image: ubuntu:rolling
            vim-ycm-owner: ycm-core
            vim-ycm-ref: master

    env:
      USER: ${{ github.repository_owner }}
      VIM_YCM_OWNER: ${{ matrix.vim-ycm-owner }}
      VIM_YCM_REF: ${{ matrix.vim-ycm-ref }}
      DEBIAN_FRONTEND: noninteractive

    steps:
      - name: Upgrade Packages
        run: |
          os_id=`sed -ne 's/^ID=//p' /etc/os-release`
          case $os_id in
              alpine) apk update && apk upgrade && apk add git;;
              fedora) dnf -y upgrade && dnf -y install git-core which;;
              ubuntu) apt-get -y update && apt-get -y upgrade && apt-get -y install git;;
          esac

      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install Prerequisites
        run: build-aux/install-prereqs

      - name: Bootstrap
        run: ./bootstrap
        env:
          ENVCONF_BOOTSTRAP_INSTALL_REQS: true

      - name: Configure
        run: ./configure --prefix=$RUNNER_TEMP/.local --sysconfdir=$RUNNER_TEMP/.config

      - name: Build
        run: make

      - name: Test
        run: make distcheck

      - name: Install
        run: make install

      - name: Integration Test
        run: |
          vim -es -u $RUNNER_TEMP/.config/vim/vimrc -i NONE -c PlugInstall -c qa
          find $RUNNER_TEMP/.config/vim/plugged/YouCompleteMe -name 'ycm_core.so' | grep .

      - name: Configure Version
        run: echo "PROJECT_VERSION=`cat .version`" >>$GITHUB_ENV

      - name: Upload Distribution Artifact
        uses: actions/upload-artifact@v2
        with:
          name: distribution-tarball
          path: |
            envconf-${{ env.PROJECT_VERSION }}.tar.gz
            .version

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build-test
    #if: startsWith(github.ref, 'refs/tags/v') && needs.build-test.result == 'success'
    if: startsWith(github.ref, 'refs/heads/8') && needs.build-test.result == 'success'

    steps:
      - name: Download Distribution Artifact
        uses: actions/download-artifact@v2
        with:
          name: distribution-tarball

      - name: Configure Version
        run: echo "PROJECT_VERSION=`cat .version`" >>$GITHUB_ENV

      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          tag_name: v${{ env.PROJECT_VERSION }}
          release_name: Release ${{ env.PROJECT_VERSION }}

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: envconf-${{ env.PROJECT_VERSION }}.tar.gz
          asset_name: envconf-${{ env.PROJECT_VERSION }}.tar.gz
          asset_content_type: application/gzip
