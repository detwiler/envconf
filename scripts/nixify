#! /bin/env bash

# functions

function usage()
{
	cat <<- eof 

	${0##*/}: Give files sane unix properties to include:
	  * proper execute permissions
	  * unix line endings in text files
	  * newlines at end of text files

	Usage: ${0##*/} [-v | -c] [-d] [-n] [-p <name>]... [-m <maxdepth>] <dir>...

	  -v verbose chmod output
	  -c like verbose but report only when a change is made
	  -d run dos2unix if necessary
	  -n add a newline to the end of the file if necessary
	  -p name to prune from the list of files to operate on (defaults
	     include .svn and CVS)
	  -m maxdepth to recurse into subdirectories

	Examples:

	   ${0##*/} -c include src

	eof
} # usage()

verbose=""
dos2unix=""
newline=""
quiet="--quiet"
maxdepth=""
prunes="-name .git -o -name .svn -o -name CVS"

# process command line options
while getopts ":m:p:cvdn" opt; do
  case $opt in
    c ) verbose="--changes"; quiet="";;
    v ) verbose="--verbose"; quiet="";;
    d ) dos2unix="true";;
    n ) newline="true";;
    m ) maxdepth="-maxdepth $OPTARG";;
    p ) prunes="$prunes -o -name $OPTARG";;
    \? ) usage; exit 1;;
  esac
done

shift $(($OPTIND - 1))

dirs="$@"

if [[ -z $dirs ]]; then
  dirs="."
fi

for file in \
  $(find $dirs $maxdepth \( $prunes \) -prune -o -type f -print); do

  # FIXME this is a hack to get around filenames with spaces
  if [[ ! -e $file ]]; then continue; fi

  file_type="$(file --brief $file)"

  if echo $file_type | grep "executable" &> /dev/null; then
    chmod 755 $verbose $file
  else
    chmod 644 $verbose $file
  fi

  if [[ -n $dos2unix ]]; then
    if echo $file_type | grep "CRLF" &> /dev/null; then
      dos2unix $quiet $file
    fi
  fi

  if [[ -n $newline ]]; then
    if echo $file_type | grep "text" &> /dev/null; then
      if (( $(tail --bytes=1 $file | wc --lines) == 0 )); then
        if [[ -n $verbose ]]; then
          echo "Adding newline to $file"
        fi
        sed --in-place '$ s/^.*$/&\n/' $file
      fi
    fi
  fi

done
