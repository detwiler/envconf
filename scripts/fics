#! /bin/env bash

# functions

function usage()
{
	cat <<- eof 

	Usage: ${0##*/} [-v] [-s <suffix>] ([-d <dir>]... | [-f <dirfile>]...) <file>...

	  -d directories to search for include files
	  -f file with list of directories to search for include files
	  -s suffix for backup copy
	  -v verbose output

	Examples:

	   ${0##*/} -d "include goaheadweb/include" source/*.c

	eof
} # usage()

# constant variables

# captures filename from include directive
include_regexp_prefix='^\s*#\s*include\s\+["<]'
include_regexp_suffix='[">].*$'
include_file_regexp="${include_regexp_prefix}\(.*\)${include_regexp_suffix}"
include_file_sedexp="s:${include_file_regexp}:\1:p"
search_directory_list=""
directory_file_list=""
verbose=""
suffix=""

# process command line options
while getopts ":d:f:s:v" opt; do
  case ${opt} in
    d ) search_directory_list="${search_directory_list} ${OPTARG}";;
    f ) directory_file_list="${directory_file_list} ${OPTARG}";;
    s ) suffix="=$(echo ${OPTARG} | tr --delete [:space:])";;
    v ) verbose="true";;
    \? ) usage; exit 1;;
  esac
done

shift $((${OPTIND} - 1))

echo ""

if [[ -n ${directory_file_list} ]]; then

  for dirfile in ${directory_file_list}; do

    if [[ -e ${dirfile} ]]; then

      newdirs="$(cat ${dirfile} | tr --squeeze-repeats "\n\r" " ")"

      if [[ -n ${newdirs} ]]; then

        search_directory_list="${search_directory_list} ${newdirs}"
      fi

    else

      echo "File does not exist: ${dirfile}"
    fi
  done
fi

if [[ -z ${search_directory_list} ]]; then

  echo "You must specify at least one directory with -d or -f"
  usage
  exit 1;
fi

# process arguments
for source_file in "${@}"; do

  if [[ ! -e ${source_file} ]]; then

    echo "Source file does not exist: ${source_file}"
    continue
  fi

  echo "Source file: ${source_file}"

  # generate a list of included files and process each one
  for include_file in $(sed --quiet ${include_file_sedexp} ${source_file} \
    | tr --squeeze-repeats "\r\n" " "); do

    if [[ -n ${verbose} ]]; then echo "Include file: ${include_file}"; fi

    # search recursively in each directory until we find a match
    for dir in ${search_directory_list}; do

      dir=${dir%/} # remove any trailing path separator

      if [[ -n ${verbose} ]]; then echo "Search directory: ${dir}"; fi

      # perform a case-insensitive search recursively in dir for include_file.
      # find complains if -iname's argument contains a path along with a 
      # filename so we pass include_file's basename which will find all 
      # matches in the directory tree rooted at dir. we process each file until
      # we find one with the same path as include_file.
      for file in $(find ${dir} -iname $(basename ${include_file})); do

        file=${file#${dir}/} # remove search directory from file path

        if [[ -n ${verbose} ]]; then echo "Found file: ${file}"; fi

        # if they have the same case-insensitive path, then we have a match
        if [[ $(dirname ${include_file} | tr [:upper:] [:lower:]) ==  \
              $(dirname ${file} | tr [:upper:] [:lower:]) ]]; then

          # substitute iff the filenames are different
          if [[ ${file} != ${include_file} ]]; then

            # we're going to use include_file as an address in our sed command
            # so we need to escape any path separators that it contains
            file_address="${include_file//\//\/}"

            # now we build the address for our sed command
            address="${include_regexp_prefix}${file_address}"
            address="${address}${include_regexp_suffix}"

            sed --in-place${suffix} \
              "/${address}/ s:${include_file}:${file}:" ${source_file}

            echo "${include_file} --> ${file}"
          fi

          break 2 # jump to the next include_file
        fi
      done
    done
  done

  echo ""
done
